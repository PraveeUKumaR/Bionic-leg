# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  pull_request:
    branches: [master]
  push:
    branches: [mac-wheel]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8]
        poetry-version: [1.0.10]
        os: [macos-10.15]
        cuda: [cpu, cu102, cu111]
        exclude:
          - os: macos-10.15
            cuda: 'cu102'
          - os: macos-10.15
            cuda: 'cu111'
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: echo os
        run: echo ${{ matrix.os }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: ${{ matrix.poetry-version }}

      - if: matrix.os == 'ubuntu-latest'
        name: Set Poetry config (linux)
        run: |
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path ~/.virtualenvs

      - if: matrix.os == 'macos-10.15'
        name: Set Poetry config (macOS)
        run: |
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path ~/.virtualenvs

      - if: matrix.os == 'windows-latest'
        name: Set Poetry config (windows)
        run: |
          poetry config virtualenvs.in-project false

      - if: matrix.os == 'ubuntu-latest'
        name: Add PyTorch and PyG dependencies (linux)
        run: |
          poetry add https://download.pytorch.org/whl/${{ matrix.cuda }}/torch-1.9.0%2B${{ matrix.cuda }}-cp38-cp38-linux_x86_64.whl
          poetry add https://pytorch-geometric.com/whl/torch-1.9.0%2B${{ matrix.cuda }}/torch_cluster-1.5.9-cp38-cp38-linux_x86_64.whl
          poetry add https://pytorch-geometric.com/whl/torch-1.9.0%2B${{ matrix.cuda }}/torch_scatter-2.0.8-cp38-cp38-linux_x86_64.whl
          poetry add https://pytorch-geometric.com/whl/torch-1.9.0%2B${{ matrix.cuda }}/torch_sparse-0.6.11-cp38-cp38-linux_x86_64.whl
          poetry add torch-geometric=1.7.2

      - if: matrix.os == 'macos-10.15'
        name: Add PyTorch and PyG dependencies (macOS)
        run: |
          poetry add https://download.pytorch.org/whl/${{ matrix.cuda }}/torch-1.9.0-cp38-none-macosx_10_9_x86_64.whl
          poetry add https://pytorch-geometric.com/whl/torch-1.9.0%2B${{ matrix.cuda }}/torch_cluster-1.5.9-cp38-cp38-macosx_10_14_x86_64.whl
          poetry add https://pytorch-geometric.com/whl/torch-1.9.0%2B${{ matrix.cuda }}/torch_scatter-2.0.8-cp38-cp38-macosx_10_14_x86_64.whl
          poetry add https://pytorch-geometric.com/whl/torch-1.9.0%2B${{ matrix.cuda }}/torch_sparse-0.6.11-cp38-cp38-macosx_10_14_x86_64.whl
          poetry add torch-geometric=1.7.2

      - if: matrix.os == 'windows-latest'
        name: Add PyTorch and PyG dependencies (windows)
        run: |
          poetry add https://download.pytorch.org/whl/${{ matrix.cuda }}/torch-1.9.0%2B${{ matrix.cuda }}-cp38-cp38-win_amd64.whl
          poetry add https://pytorch-geometric.com/whl/torch-1.9.0%2B${{ matrix.cuda }}/torch_cluster-1.5.9-cp38-cp38-win_amd64.whl
          poetry add https://pytorch-geometric.com/whl/torch-1.9.0%2B${{ matrix.cuda }}/torch_scatter-2.0.8-cp38-cp38-win_amd64.whl
          poetry add https://pytorch-geometric.com/whl/torch-1.9.0%2B${{ matrix.cuda }}/torch_sparse-0.6.11-cp38-cp38-win_amd64.whl
          poetry add torch-geometric=1.7.2

      - name: Install dependencies
        run: |
          poetry install

      - name: Format with Black
        run: |
          poetry run black .

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - if: matrix.cuda == 'cpu'
        name: Test with pytest
        run: |
          poetry run pytest

      - name: Build wheel
        run: |
          poetry build

      - name: Rename wheel
        run: python build/rename_wheel.py --os ${{ matrix.os }} --cuda ${{ matrix.cuda }}

      - name: Upload wheel
        uses: actions/upload-artifact@v2
        with:
          path: dist/*.whl
