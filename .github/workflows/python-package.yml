# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8]
        poetry-version: [1.0.10]
#         os: [ubuntu-latest, macos-latest, windows-latest]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
      
    - name: echo os
      run: echo ${{ matrix.os }}
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Get GCC
      run: sudo apt-get install -y gcc-9

    - name: Install Poetry
      uses: abatilo/actions-poetry@v2.0.0
      with:
        poetry-version: ${{ matrix.poetry-version }}

    - name: Cache Poetry virtualenv
      uses: actions/cache@v2
      id: cache
      with:
        path: ~/.virtualenvs
        key: poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          poetry-${{ hashFiles('**/poetry.lock') }}


    - name: Set Poetry config
      run: |
        poetry config virtualenvs.in-project false
        poetry config virtualenvs.path ~/.virtualenvs

    - if: ${{ matrix.os }} == 'ubuntu-latest'
      name: Add PyTorch and PyG dependencies (linux)
      run: |
        poetry add https://download.pytorch.org/whl/cpu/torch-1.6.0%2Bcpu-cp38-cp38-linux_x86_64.whl
        poetry add https://pytorch-geometric.com/whl/torch-1.6.0/torch_cluster-latest%2Bcpu-cp38-cp38-linux_x86_64.whl
        poetry add https://pytorch-geometric.com/whl/torch-1.6.0/torch_scatter-latest%2Bcpu-cp38-cp38-linux_x86_64.whl
        poetry add https://pytorch-geometric.com/whl/torch-1.6.0/torch_sparse-latest%2Bcpu-cp38-cp38-linux_x86_64.whl
        poetry add torch-geometric=1.6.1

    - name: Install dependencies
      run: |
        poetry install
      if: steps.cache.outputs.cache-hit != 'true'

    - name: Format with Black
      run: |
        poetry run black .

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        poetry run pytest
        
    - name: Build wheel
      run: |
        poetry build

    - name: Upload wheel
      uses: actions/upload-artifact@v2
      with:
        name: wheel
        path: $(ls -t dist/*.whl | head -1)
